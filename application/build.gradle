plugins {
    id 'org.springframework.boot'
    id 'org.openapi.generator' version '4.3.1'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    archivesBaseName = 'hackathon'
}

dependencies {
    implementation project(':domain-entities')

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testCompile 'org.springframework.security:spring-security-test'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

test {
    useJUnitPlatform()
}

// For Maven see:
// https://reflectoring.io/spring-boot-openapi/
// https://github.com/thombergs/code-examples/tree/master/spring-boot/spring-boot-openapi

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/src/main/resources/api.yaml"
    outputDir = "$buildDir/generated/api"
    apiPackage = "com.example.demo.api"
    invokerPackage = "com.example.demo.invoker"
    modelPackage = "com.example.demo.model"
}

compileJava.dependsOn tasks.openApiGenerate
